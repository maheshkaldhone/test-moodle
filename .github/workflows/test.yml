name: Auto Plugin Deployment

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select branch to deploy'
        required: false
        type: string
        default: ""

env:
  PROD_MOODLE_ROOT: /var/www/html/moodle

jobs:
  find-changed:
    name: Find Changed Directories
    runs-on: ubuntu-latest
    outputs:
      changed_dirs: ${{ steps.list_dirs.outputs.changed_dirs }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect changes in specified directories
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            mod:
              - "mod/**"
      - name: Extract changed directories
        id: list_dirs
        run: |
          echo "Changed files detected: ${{ steps.filter.outputs.mod_files }}"
                                     
          all_changed_files="${{ steps.filter.outputs.mod_files }}"
                                                                                             
          dirs=$(echo "$all_changed_files" \
                  | sed 's/[][]//g' \
                  | tr ',' '\n' \
                  | sed 's/^ *//; s/ *$//' \
                  | sed -E 's|^([^/]+/[^/]+).*|\1|' \
                  | sort -u)
          echo "Raw detected directories:"
          echo "$dirs"
                                                     
          if [[ -z "$dirs" ]]; then
            json="[]"
          else
            json=$(printf '%s\n' "$dirs" | jq -R . | jq -s -c .)
          fi
          echo "Detected directories: $json"
          echo "changed_dirs=$json" >> "$GITHUB_OUTPUT"
          
          
  package:
    name: Package Changed Directories
    needs: find-changed
    if: ${{ needs.find-changed.outputs.changed_dirs != '[]' && needs.find-changed.outputs.changed_dirs != '' }}
    strategy:
      matrix:
        dir: ${{ fromJson(needs.find-changed.outputs.changed_dirs || '[]') }}
    runs-on: ubuntu-latest
    outputs:
      safe_name: ${{ steps.zip.outputs.safe_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Package Directory
        id: zip
        run: |
          SAFE_NAME=$(echo "${{ matrix.dir }}" | tr '/' '-')
          ZIP_FILE="${SAFE_NAME}-$(date +'%Y%m%d-%H%M%S').zip"                                        
          BASE_DIR=$(basename "${{ matrix.dir }}")                                                                    
          cd "$(dirname "${{ matrix.dir }}")"
          zip -qr "../$ZIP_FILE" "$BASE_DIR"
          cd -     
          echo "zip_file=$ZIP_FILE" >> "$GITHUB_OUTPUT"
          echo "safe_name=$SAFE_NAME" >> "$GITHUB_OUTPUT"
                                  
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ steps.zip.outputs.safe_name }}
          path: ${{ steps.zip.outputs.zip_file }}
          retention-days: 5
          
          
  deploy:
    name: Deploy to Moodle Instance
    needs: [find-changed, package]
    if: ${{ needs.find-changed.outputs.changed_dirs != '[]' && needs.find-changed.outputs.changed_dirs != '' }}
    strategy:
      matrix:
        dir: ${{ fromJson(needs.find-changed.outputs.changed_dirs || '[]') }}
    runs-on: ${{ github.ref_name == 'main' && 'moodle-prod' || github.ref_name == 'dev' && 'moodle-dev' || 'self-hosted' }}
    
          
    steps:


      - name: Log Matrix Directory
        run: |
          SAFE_NAME=$(echo "${{ matrix.dir }}" | tr '/' '-')
          echo "Matrix directory: ${{ matrix.dir }}"
          echo "Safe directory name: $SAFE_NAME"

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-${{ needs.package.outputs.safe_name }}
          path: /tmp
                                                                            
      - name: Determine Moodle Root Path
        id: determine-path
        run: |
          branch="${{ github.event.inputs.branch || github.ref_name }}"
          case "$branch" in
            dev)  MOODLE_PATH=${{ env.DEV_MOODLE_ROOT }} ;;
            main) MOODLE_PATH=${{ env.PROD_MOODLE_ROOT }} ;;
            *) MOODLE_PATH=${{ env.DEV_MOODLE_ROOT }} ;;
          esac
          echo "Moodle root path: $MOODLE_PATH"
          echo "MOODLE_PATH=$MOODLE_PATH" >> "$GITHUB_ENV"

      - name: Backup current directory
        run: |
            TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
            TARGET_DIR="${MOODLE_PATH}/${{ matrix.dir }}"
            BACKUP_DIR="/tmp/moodle-backup"
            BACKUP_FILE="${BACKUP_DIR}/$(basename '${{ matrix.dir }}')-backup-${TIMESTAMP}.zip"
        
            echo "Ensuring backup directory exists: $BACKUP_DIR"
            sudo mkdir -p "$BACKUP_DIR"
        
            echo "Backing up directory: $TARGET_DIR"
            echo "Backup file: $BACKUP_FILE"
            if [ -d "$TARGET_DIR" ]; then
              sudo zip -r "$BACKUP_FILE" "$TARGET_DIR"
              echo "Backup created at $BACKUP_FILE"
            else
              echo "No existing directory found at $TARGET_DIR, skipping backup."
            fi        

      - name: Deploy to Moodle
        run: |
            DEPLOY_DIR="${MOODLE_PATH}/$(dirname ${{ matrix.dir }})"
            ZIP_FILE=$(ls -t /tmp/$(echo "${{ matrix.dir }}" | tr '/' '-')-*.zip | head -n 1)
            echo "Deploying to directory: $DEPLOY_DIR"
            echo "ZIP file: $ZIP_FILE"
        
            if [[ -f "$ZIP_FILE" ]]; then
              sudo unzip -qo "$ZIP_FILE" -d "$DEPLOY_DIR"
              sudo chown -R www-data:www-data "$DEPLOY_DIR/$(basename ${{ matrix.dir }})"
              echo "Deployment completed for ${{ matrix.dir }}"
            else
              echo "No valid ZIP file found for deployment!"
              exit 1
            fi