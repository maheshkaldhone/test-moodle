name: Auto Plugin Deployment Test

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select branch to deploy'
        required: false
        type: string
        default: ""
      # Optionally, you could add a plugin-directory input to override auto‑detection
      plugin-directory:
        description: 'Plugin directory under mod/ (override auto‑detection)'
        required: false
        type: string

env:
  PROD_MOODLE_ROOT: /var/www/html/moodle
  DEV_MOODLE_ROOT: /var/www/html/moodle

jobs:
  find-changed:
    name: Find Changed Plugin Directories
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.list_plugins.outputs.plugins }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect changes in mod folder
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            mod:
              - "mod/**"

      - name: Extract changed plugin directories
        id: list_plugins
        run: |
          echo "Changed files detected: ${{ steps.filter.outputs.mod_files }}"
          # Remove square brackets, split by comma, trim spaces, and extract the first folder after "mod/"
          plugins=$(echo "${{ steps.filter.outputs.mod_files }}" \
                     | sed 's/[][]//g' \
                     | tr ',' '\n' \
                     | sed 's/^ *//; s/ *$//' \
                     | sed -E 's/^mod\/([^/]+).*/\1/')
          echo "Raw detected plugin directories:"
          echo "$plugins"
          # Remove duplicates
          plugins=$(echo "$plugins" | sort -u)
          # If no plugins detected, set json to []
          if [[ -z "$plugins" ]]; then
            json="[]"
          else
            # Create a compact JSON array (single-line)
            json=$(printf '%s\n' "$plugins" | jq -R . | jq -s -c .)
          fi
          echo "Detected plugins: $json"
          echo "plugins=$json" >> "$GITHUB_OUTPUT"

  package:
    name: Package Changed Plugins
    needs: find-changed
    # Only run if plugins output is not empty and not an empty JSON array.
    if: ${{ needs.find-changed.outputs.plugins != '' && needs.find-changed.outputs.plugins != '[]' }}
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.find-changed.outputs.plugins) }}
    runs-on: self-hosted
    outputs:
      zip_file: ${{ steps.zip.outputs.zip_file }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Timestamp
        id: timestamp
        run: echo "time=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Package Plugin
        id: zip
        run: |
          ZIP_FILE="${{ matrix.plugin }}-${{ steps.timestamp.outputs.time }}.zip"
          cd mod
          if [ -d "${{ matrix.plugin }}" ]; then
            zip -qr "../$ZIP_FILE" "${{ matrix.plugin }}"
          else
            echo "Directory mod/${{ matrix.plugin }} not found!"
            exit 1
          fi
          echo "zip_file=$ZIP_FILE" >> "$GITHUB_OUTPUT"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-package-${{ matrix.plugin }}
          path: ${{ steps.zip.outputs.zip_file }}
          retention-days: 5

  deploy:
    name: Deploy to Instance
    needs: package
    if: ${{ needs.find-changed.outputs.plugins != '' && needs.find-changed.outputs.plugins != '[]' }}
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.find-changed.outputs.plugins) }}
    runs-on:
      - self-hosted
      - Linux
      - X64
      - ${{ (github.event.inputs.branch || github.ref_name) == 'dev' && 'dev' || 'prod' }}
    environment:
      name: ${{ (github.event.inputs.branch || github.ref_name) == 'main' && 'production' || 'development' }}
      url: ${{ (github.event.inputs.branch || github.ref_name) == 'main' && 'http://moodle-lb-244874513.us-east-2.elb.amazonaws.com' || 'http://moodle-dev-lb-244874513.us-east-2.elb.amazonaws.com' }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-package-${{ matrix.plugin }}
          path: /tmp

      - name: Determine Moodle Root Path
        id: determine-path
        run: |
          branch="${{ github.event.inputs.branch || github.ref_name }}"
          case "$branch" in
            dev)  MOODLE_PATH=${{ env.DEV_MOODLE_ROOT }} ;;
            main) MOODLE_PATH=${{ env.PROD_MOODLE_ROOT }} ;;
            *) MOODLE_PATH=${{ env.DEV_MOODLE_ROOT }} ;;
          esac
          echo "MOODLE_PATH=$MOODLE_PATH" >> "$GITHUB_ENV"

      - name: Compare version numbers
        run: |
          TEMP_ARTIFACT_DIR="/tmp/temp_artifact_${{ steps.timestamp.outputs.time }}"
          mkdir -p "$TEMP_ARTIFACT_DIR"
          # Locate the downloaded zip file for this plugin
          ZIP_FILE=$(find /tmp -maxdepth 1 -type f -name "${{ matrix.plugin }}-*.zip")
          unzip -q "$ZIP_FILE" -d "$TEMP_ARTIFACT_DIR"
          artifact_file="$TEMP_ARTIFACT_DIR/${{ matrix.plugin }}/version.php"
          server_file="${{ env.MOODLE_PATH }}/mod/${{ matrix.plugin }}/version.php"
          if [ ! -f "$artifact_file" ]; then
            echo "::error:: Artifact version file not found!"
            exit 1
          fi
          ver_artifact=$(grep '\$plugin->version' "$artifact_file" | awk -F'=' '{print $2}' | tr -d " ;")
          echo "Artifact version: $ver_artifact"
          if [ -f "$server_file" ]; then
            ver_server=$(grep '\$plugin->version' "$server_file" | awk -F'=' '{print $2}' | tr -d " ;")
            echo "Server version: $ver_server"
            if [ "$ver_server" -gt "$ver_artifact" ]; then
              echo "::error:: Server version ($ver_server) is greater than artifact version ($ver_artifact). Deployment aborted."
              exit 1
            fi
          else
            echo "Server version file not found, proceeding."
          fi
          rm -rf "$TEMP_ARTIFACT_DIR"

      - name: Backup current plugin directory
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          PLUGIN_DIR="${{ env.MOODLE_PATH }}/mod/${{ matrix.plugin }}"
          BACKUP_FILE="/tmp/${{ matrix.plugin }}-backup-${TIMESTAMP}.zip"
          if [ -d "$PLUGIN_DIR" ]; then
            sudo zip -r "$BACKUP_FILE" "$PLUGIN_DIR"
            echo "Backup created at $BACKUP_FILE"
          else
            echo "No existing plugin directory found, skipping backup."
          fi

      - name: Deploy to Moodle
        run: |
          DEPLOY_DIR="${{ env.MOODLE_PATH }}/mod"
          ZIP_FILE=$(find /tmp -maxdepth 1 -type f -name "${{ matrix.plugin }}-*.zip")
          sudo unzip -qo "$ZIP_FILE" -d "$DEPLOY_DIR"
          sudo chown -R www-data:www-data "$DEPLOY_DIR/${{ matrix.plugin }}"
