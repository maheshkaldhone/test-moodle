name: Auto Plugin Deployment

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  PROD_MOODLE_ROOT: /var/www/html/moodle
  DEV_MOODLE_ROOT: /var/www/html/moodle

jobs:
  find-changed:
    name: Find Changed Plugin Directories
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.list_plugins.outputs.plugins }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Detect changes in any file under the mod/ folder
      - name: Detect changes in mod folder
        id: filter
        uses: dorny/paths-filter@v3
        with:
          list-files: json
          filters: |
            mod:
              - "mod/**"

      # Extract the unique first-level subdirectories under mod/
      - name: Extract changed plugin directories
        id: list_plugins
        run: |
          echo "Changed files detected: ${{ steps.filter.outputs.mod_files }}"
          # Remove square brackets, split by comma, trim spaces, and extract the first folder after "mod/"
          plugins=$(echo "${{ steps.filter.outputs.mod_files }}" \
                     | sed 's/[][]//g' \
                     | tr ',' '\n' \
                     | sed 's/^ *//; s/ *$//' \
                     | sed -E 's/^mod\/([^/]+).*/\1/')
          echo "Raw detected plugin directories:"
          echo "$plugins"
          # Remove duplicates
          plugins=$(echo "$plugins" | sort -u)
          # If no plugins detected, set json to []
          if [[ -z "$plugins" ]]; then
            json="[]"
          else
            # Create a compact JSON array (single-line)
            json=$(printf '%s\n' "$plugins" | jq -R . | jq -s -c .)
          fi
          echo "Detected plugins: $json"
          echo "plugins=$json" >> "$GITHUB_OUTPUT"

  package:
    name: Package Changed Plugins
    needs: find-changed
    # Only run if plugins output is not empty and not an empty JSON array.
    if: ${{ needs.find-changed.outputs.plugins != '' && needs.find-changed.outputs.plugins != '[]' }}
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.find-changed.outputs.plugins) }}
    runs-on: self-hosted
    outputs:
      zip_file: ${{ steps.zip.outputs.zip_file }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Timestamp
        id: timestamp
        run: echo "time=$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Package Plugin
        id: zip
        run: |
          ZIP_FILE="${{ matrix.plugin }}-${{ steps.timestamp.outputs.time }}.zip"
          cd mod
          if [ -d "${{ matrix.plugin }}" ]; then
            zip -qr "../$ZIP_FILE" "${{ matrix.plugin }}"
          else
            echo "Directory mod/${{ matrix.plugin }} not found!"
            exit 1
          fi
          echo "zip_file=$ZIP_FILE" >> "$GITHUB_OUTPUT"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-package-${{ matrix.plugin }}
          path: ${{ steps.zip.outputs.zip_file }}
          retention-days: 5

  deploy:
    name: Deploy Changed Plugins
    needs: package
    if: ${{ needs.find-changed.outputs.plugins != '' && needs.find-changed.outputs.plugins != '[]' }}
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.find-changed.outputs.plugins) }}
    runs-on: self-hosted
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-package-${{ matrix.plugin }}
          path: /tmp

      - name: Determine Moodle Root Path
        run: |
          # Use the appropriate Moodle root; adjust as needed for branch logic
          MOODLE_PATH="/var/www/html/moodle"
          echo "MOODLE_PATH=$MOODLE_PATH" >> "$GITHUB_ENV"

      - name: Deploy Plugin
        run: |
          DEPLOY_DIR="${{ env.MOODLE_PATH }}/mod"
          # Locate the zip file for this plugin in /tmp
          ZIP_FILE=$(find /tmp -maxdepth 1 -type f -name "${{ matrix.plugin }}-*.zip")
          if [ -z "$ZIP_FILE" ]; then
            echo "Zip file not found for plugin ${{ matrix.plugin }}"
            exit 1
          fi
          sudo unzip -qo "$ZIP_FILE" -d "$DEPLOY_DIR"
          sudo chown -R www-data:www-data "$DEPLOY_DIR/${{ matrix.plugin }}"
